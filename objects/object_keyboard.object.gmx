<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add a bunch of keyboard sets:

//First row:
Set_1[0,0] = "a";
Set_1[0,1] = "z";
Set_1[0,2] = "e";
Set_1[0,3] = "r";
Set_1[0,4] = "t";
Set_1[0,5] = "y";
Set_1[0,6] = "u";
Set_1[0,7] = "i";
Set_1[0,8] = "o";
Set_1[0,9] = "p";

//Second row:
Set_1[1,0] = "q";
Set_1[1,1] = "s";
Set_1[1,2] = "d";
Set_1[1,3] = "f";
Set_1[1,4] = "g";
Set_1[1,5] = "h";
Set_1[1,6] = "j";
Set_1[1,7] = "k";
Set_1[1,8] = "l";
Set_1[1,9] = "m";

//Third row: It gets funky from here...
Set_1[2,0] = "MAJ";
Set_1[2,1] = "w";
Set_1[2,2] = "x";
Set_1[2,3] = "c";
Set_1[2,4] = "v";
Set_1[2,5] = "b";
Set_1[2,6] = "n";
Set_1[2,7] = "'";
Set_1[2,8] = "DELETE";

//Fourth row: I dunno what to do for these special keys:
Set_1[3,0] = "OTHER";
Set_1[3,1] = ",";
Set_1[3,2] = "~";
Set_1[3,3] = " ";
Set_1[3,4] = ".";
Set_1[3,5] = "ENTER";


//Second set:
//First row
Set_2[0,0] = "1";
Set_2[0,1] = "2";
Set_2[0,2] = "3";
Set_2[0,3] = "4";
Set_2[0,4] = "5";
Set_2[0,5] = "6";
Set_2[0,6] = "7";
Set_2[0,7] = "8";
Set_2[0,8] = "9";
Set_2[0,9] = "0";
//Second row
Set_2[1,0] = "@";
Set_2[1,1] = "\";
Set_2[1,2] = "ยง";
Set_2[1,3] = "$";
Set_2[1,4] = "%";
Set_2[1,5] = "&amp;";
Set_2[1,6] = "-";
Set_2[1,7] = "+";
Set_2[1,8] = "(";
Set_2[1,9] = ")";

//Third row
Set_2[2,0] = "=";
Set_2[2,1] = "*";
Set_2[2,2] = '"';
Set_2[2,3] = "'";
Set_2[2,4] = ":";
Set_2[2,5] = ";";
Set_2[2,6] = "!";
Set_2[2,7] = "?";
Set_2[2,8] = "DELETE";
Set_2[2,9] = "=";

//Fourth row:
Set_2[3,0] = "OTHER";
Set_2[3,1] = ",";
Set_2[3,2] = "/";
Set_2[3,3] = " ";
Set_2[3,4] = ".";
Set_2[3,5] = "ENTER";

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the keyboard with default values;
//Normally the keyboard has to be called through keyboard_create script


//Default Dimensions:
Width = 480;
Height = 298;

Selected_set = Set_1;
Switched_set = false;

Keyboard_font = font_keyboard_default_font;
Keyboard_keys_per_row = 10;
Keyboard_rows = 4;

Keycaps_width = Width/Keyboard_keys_per_row; //Divided by the number of keys in a row
Keycaps_height = Height/Keyboard_rows; //Divided by the number of rows.
Keycaps_xoffset = 4;
Keycaps_yoffset = 6;

Keycaps_xradius = 5;
Keycaps_yradius = 10;

Keyboard_pressed_key = "";
Keyboard_released_key = "";
Keyboard_lastkey = "";
Keyboard_text = "";

Keyboard_maj = false;



//Colors:
Background_color = make_color_rgb(236,239,241);
Keycaps_color = make_color_rgb(236,239,241);
Keycaps_color_pressed = make_color_rgb(224,227,229);
Keycaps_text_color = c_black;

//Visibility states:
Background_visible = true;
Keycaps_visible = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset the pressed/released state of the keyboard.
Keyboard_pressed_key = "";
Keyboard_released_key = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check which key is pressed and behave accordingly:

for(i=0;i&lt;5;i++){
    if device_mouse_check_button_pressed(i,mb_any){
        Mouse_x = device_mouse_x(i);
        Mouse_y = device_mouse_y(i);
        if point_in_rectangle(Mouse_x,Mouse_y,x,y,x+Width,y+Height){
            //If he is taping on the keyboard:
            with(object_keyboard_key){
                if point_in_rectangle(object_keyboard.Mouse_x,object_keyboard.Mouse_y,x,y,x+Width,y+Height){
                if !Pressed{
                        //The key is being touched.
                        Pressed = true;
                        Mouse_id = other.i;
                        
                        object_keyboard.Keyboard_pressed_key = Key_value;
                        object_keyboard.alarm[0] = 2;
                        
                        //Special behavior in case of the delete key:
                            if Key_value = "DELETE"{
                                alarm[11] = floor(room_speed/2);
                                }
                        
                        __spse_keyboard_update_text(Key_value);
                        
                        break;
                        }
                    }
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the background when set to visible.
if Background_visible{
    draw_set_alpha(1);
    draw_set_color(Background_color);
    draw_rectangle(x,y,x+Width-1,y+Height-1,false);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
