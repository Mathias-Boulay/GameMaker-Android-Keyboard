<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the keyboard with default values;
//Normally the keyboard has to be called through keyboard_create script

//Debug:
x = 0;
y = 1280-446;

//Dimensions:
Width = 720;
Height = 446;
Selected_set = Set_1;
Switched_set = false;

Keycaps_width = Width/10; //Divided by the number of keys in a row
Keycaps_height = Height/4; //Divided by the number of rows.
Keycaps_xoffset = 4;
Keycaps_yoffset = 6;

Keycaps_radius = 5;

Keyboard_pressed_key = "";
Keyboard_released_key = "";
Keyboard_lastkey = "";
Keyboard_text = "";



//Colors:
Background_color = c_blue;
Keycaps_color = c_gray;
Keycaps_color_pressed = c_aqua;
Keycaps_text_color = c_black;

//Visibility states:
Background_visible = true;
Keycaps_visible = true;



alarm[11] = 10;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add a bunch of keyboard sets:

//First row:
Set_1[0,0] = "a";
Set_1[0,1] = "z";
Set_1[0,2] = "e";
Set_1[0,3] = "r";
Set_1[0,4] = "t";
Set_1[0,5] = "y";
Set_1[0,6] = "u";
Set_1[0,7] = "i";
Set_1[0,8] = "o";
Set_1[0,9] = "p";

//Second row:
Set_1[1,0] = "q";
Set_1[1,1] = "s";
Set_1[1,2] = "d";
Set_1[1,3] = "f";
Set_1[1,4] = "g";
Set_1[1,5] = "h";
Set_1[1,6] = "j";
Set_1[1,7] = "k";
Set_1[1,8] = "l";
Set_1[1,9] = "m";

//Third row: It gets funky from here...
Set_1[2,0] = "MAJ";
Set_1[2,1] = "w";
Set_1[2,2] = "x";
Set_1[2,3] = "c";
Set_1[2,4] = "v";
Set_1[2,5] = "b";
Set_1[2,6] = "n";
Set_1[2,7] = "'";
Set_1[2,8] = "DELETE";

//Fourth row: I dunno what to do for these special keys:
Set_1[3,0] = "OTHER";
Set_1[3,1] = ",";
Set_1[3,2] = "CHANGE LAYOUT";
Set_1[3,3] = " ";
Set_1[3,4] = ".";
Set_1[3,5] = "ENTER";


//Second set:
Set_2[0,0] = "1";
Set_2[0,1] = "2";
Set_2[0,2] = "3";
Set_2[0,3] = "4";
Set_2[0,4] = "5";
Set_2[0,5] = "6";
Set_2[0,6] = "7";
Set_2[0,7] = "8";
Set_2[0,8] = "9";
Set_2[0,9] = "0";

Set_2[1,0] = "@";
Set_2[1,1] = "#";
Set_2[1,2] = "â‚¬";
Set_2[1,3] = "$";
Set_2[1,4] = "%";
Set_2[1,5] = "&amp;";
Set_2[1,6] = "-";
Set_2[1,7] = "+";
Set_2[1,8] = "(";
Set_2[1,9] = ")";

Set_2[2,0] = "=";
Set_2[2,1] = "*";
Set_2[2,2] = '"';
Set_2[2,3] = "'";
Set_2[2,4] = ":";
Set_2[2,5] = ";";
Set_2[2,6] = "!";
Set_2[2,7] = "?";
Set_2[2,8] = "DELETE";
Set_2[2,9] = "=";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check which key is pressed and behave accordingly:
if point_in_rectangle(mouse_x,mouse_y,x,y,x+Width,y+Height){
    //If he is taping on the keyboard:
    with(keyboard_key){
        if point_in_rectangle(mouse_x,mouse_y,x,y,x+Width,y+Height){
            //The key is being touched.
            Pressed = true;
            
            object_keyboard.Keyboard_pressed_key = Key_value;
            
            break;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(Background_color);
draw_set_alpha(1);
//draw_rectangle(x,y,x+Width,y+Height,false);
/*
draw_set_alpha(1);
draw_set_color(c_green);
for(i=0;i&lt;4;i+=1){
    for(j=0;j&lt;10;j+=1){
        X1 = x+(j*Keycaps_width)+Keycaps_xoffset;
        Y1 = y+(i*Keycaps_height)+Keycaps_yoffset;
        
        X2 = x+((j+1)*Keycaps_width)-Keycaps_xoffset;
        Y2 = y+((i+1)*Keycaps_height)-Keycaps_yoffset;
        draw_roundrect_ext(X1,Y1,X2,Y2,Keycaps_radius,Keycaps_radius,true);
                        
        }   
    }
    */
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
